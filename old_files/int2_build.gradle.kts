/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 */

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.3.41"

    // Apply the java-library plugin for API and implementation separation.
    `java-library`

     id("org.jetbrains.dokka") version "0.9.17"

     `jacoco`
     `maven-publish`


}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
}

tasks.dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"
}

tasks.jacocoTestReport {

  //aqui debe configurarse para hacerel reporte en formato CSV e indicar cual es
  //la dirección de salida.
  //la sintaxis en groovy es la siguiente
  /*
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
    }
    para examinar ejecutar:
    println("flagflag: " + reports.csv)
    */
}

//This is to generate a javadoc JAR file, and it is done with 'gradle dokkaJar'
//in the console
val dokkaJar by tasks.creating(Jar::class) {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = "Assembles Kotlin docs with Dokka"
    classifier = "javadoc"
    from(tasks.dokka)
}

group = "com.alamo"
version = "1.0.0"



//execute 'gradle sourceJar' to generate a jar file with all source
val sourcesJar by tasks.registering(Jar::class) {
    classifier = "sources"
    from(sourceSets.main.get().allSource)
}


//exec 'gradle publish' to generate the jar files for doc and the executable classes
//extraido de: https://guides.gradle.org/building-kotlin-jvm-libraries/
publishing {
    publications {
        create<MavenPublication>("default") {
            from(components["java"])
            artifact(dokkaJar)
        }
        create<MavenPublication>("maven") {
            groupId = "com.alamo.utilities"
            artifactId = "Matrix"
            version = "1.1"

            from(components["java"])
        }
    }
    repositories {
        maven {
          url = uri("$buildDir/repository")
        }

    }
}

//esto tiene que ver con la publicación en bintray,
//source: http://codictados.com/publicar-libreria-de-android/
ext {
    val bintrayRepo: String = "maven"
    val bintrayName = "utilities"

    val publishedGroupId = "com.github.johanalamo.utilities"
    val libraryName = "Utilities"
    val artifact = "utilities"

    val libraryDescription = "Librería para facilitar las operaciones con matrices en un dispositivo Android."

    val siteUrl = "https://github.com/johanalamo/utilities"
    val gitUrl = "https://github.com/johanalamo/utilities.git"

    val libraryVersion = "1.0.0"

    val developerId = "johanalamo"
    val developerName = "Johan Alamo"
    val developerEmail = "johan.alamo@gmail.com"

    val licenseName = "The Apache Software License, Version 2.0"
    val licenseUrl = "http://www.apache.org/licenses/LICENSE-2.0.txt"
    val allLicenses = arrayOf("Apache-2.0")
}

//los siguientes plugins son para la publicacion en jcenter y mavenCentral,
//estan en groovy y deben traducirse a doltin DSL.
//las url de estos archivos son:
//   https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle
//   https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle
// y la url del tutorial para esta publicacion es:
//   http://codictados.com/publicar-libreria-de-android/
//apply ("installv1.gradle.kts") //esta en groovy y debe traducirce a kotlin DSL
//apply ("bintrayv1.gradle.kts") //esta en groovy y debe traducirce a kotlin DSL

//********************** TEST ZONE ******************************************

//example tasks creation
open class GreetingTask : DefaultTask() {
    @TaskAction
    fun greet() {
        println("hello from GreetingTask")
    }
}

// Create a task using the task type
tasks.register<GreetingTask>("hellotask")

tasks.register("anothertask") {
    doLast {
      println("this is another task")
    }
}
